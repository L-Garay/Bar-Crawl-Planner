type Account {
  id: Int
  email: String
  email_verified: Boolean
  created_at: String
  profile: Profile
  deactivated: Boolean
  deactivated_at: String
  phone_number: String
}

type Profile {
  id: Int
  name: String
  profile_img: String
  updated_at: String
  account: Account
  account_id: Int
  outings: [Outing]
  social_pin: String
  friends: [Profile]
  friendsRelation: [Profile]
}

type Outing {
  id: Int
  name: String
  profiles: [Profile]
  creator_profile_id: String
  created_at: String
  start_date_and_time: String
}

type LocationDetails {
  id: Int
  business_status: String
  formatted_address: String
  city: String
  state: String
  lat: Float
  lng: Float
  html_attributions: String
  icon: String
  icon_mask_base_uri: String
  icon_background_color: String
  name: String
  place_id: String
  rating: Float
  user_ratings_total: Int
  types: [String]
  vicinity: String
  formatted_phone_number: String
  plus_compound_code: String
  plus_global_code: String
  open_periods: [String]
  weekday_text: [String]
  photos: [String]
  reviews: [String]
  url: String
  website: String
  utc_offset_minutes: Float
  price_level: Int
  expiration_date: String
}

type Query {
  getAccountByEmail(email: String!): Account
  getUserAccount: Account
  profile: Profile
  outing: Outing
  accounts: [Account]
  profiles: [Profile]
  outings: [Outing]
  getAllFriends: [Profile]
  findFriendById(id: Int!): Profile
  findFriendByPin(social_pin: String!): Profile
}

type Mutation {
  createAccount(email: String, email_verified: Boolean): Account
  createProfile(name: String, profile_img: String, account_id: Int): Profile
  updateUserAccount(email: String, phone_number: String): Account
  deactivateUserAccount(id: Int!): Account
  addFriend(id: Int!, friend_id: Int!): Profile
  removeFriend(id: Int!, friend_id: Int!): Profile
}
